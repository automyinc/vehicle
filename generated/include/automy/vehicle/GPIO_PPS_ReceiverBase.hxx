
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_automy_vehicle_GPIO_PPS_ReceiverBase_HXX_
#define INCLUDE_automy_vehicle_GPIO_PPS_ReceiverBase_HXX_

#include <automy/vehicle/package.hxx>
#include <vnx/Module.h>
#include <vnx/TopicPtr.h>


namespace automy {
namespace vehicle {

class GPIO_PPS_ReceiverBase : public ::vnx::Module {
public:
	
	::vnx::TopicPtr output = "vehicle.pps_signal";
	::std::string device;
	
	typedef ::vnx::Module Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	GPIO_PPS_ReceiverBase(const std::string& _vnx_name);
	
	vnx::Hash64 get_type_hash() const;
	const char* get_type_name() const;
	
	void read(std::istream& _in);
	void write(std::ostream& _out) const;
	
	void accept(vnx::Visitor& _visitor) const;
	
	vnx::Object to_object() const;
	void from_object(const vnx::Object& object);
	
	friend std::ostream& operator<<(std::ostream& _out, const GPIO_PPS_ReceiverBase& _value);
	friend std::istream& operator>>(std::istream& _in, GPIO_PPS_ReceiverBase& _value);
	
	static const vnx::TypeCode* get_type_code();
	static std::shared_ptr<vnx::TypeCode> create_type_code();
	
protected:
	
	void handle_switch(std::shared_ptr<const ::vnx::Sample> _sample);
	bool call_switch(vnx::TypeInput& _in, vnx::TypeOutput& _out, const vnx::TypeCode* _call_type, const vnx::TypeCode* _return_type);
	
};


} // namespace automy
} // namespace vehicle

#endif // INCLUDE_automy_vehicle_GPIO_PPS_ReceiverBase_HXX_
