
// AUTO GENERATED by vnxcppcodegen

#include <vehicle/package.hxx>
#include <vehicle/GPS_Info.hxx>
#include <vnx/Input.h>
#include <vnx/Output.h>
#include <vnx/Visitor.h>
#include <vnx/Object.h>
#include <vnx/Struct.h>


namespace vehicle {


const vnx::Hash64 GPS_Info::VNX_TYPE_HASH(0x38402729267c271full);
const vnx::Hash64 GPS_Info::VNX_CODE_HASH(0xf74beda466654469ull);

vnx::Hash64 GPS_Info::get_type_hash() const {
	return VNX_TYPE_HASH;
}

const char* GPS_Info::get_type_name() const {
	return "vehicle.GPS_Info";
}

std::shared_ptr<GPS_Info> GPS_Info::create() {
	return std::make_shared<GPS_Info>();
}

std::shared_ptr<vnx::Value> GPS_Info::clone() const {
	return std::make_shared<GPS_Info>(*this);
}

void GPS_Info::read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) {
	vnx::read(_in, *this, _type_code, _code);
}

void GPS_Info::write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const {
	vnx::write(_out, *this, _type_code, _code);
}

void GPS_Info::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = get_type_code();
	_visitor.type_begin(*_type_code);
	_visitor.type_field(_type_code->fields[0], 0); vnx::accept(_visitor, time);
	_visitor.type_field(_type_code->fields[1], 1); vnx::accept(_visitor, gps_time);
	_visitor.type_field(_type_code->fields[2], 2); vnx::accept(_visitor, time_of_week);
	_visitor.type_field(_type_code->fields[3], 3); vnx::accept(_visitor, have_fix);
	_visitor.type_field(_type_code->fields[4], 4); vnx::accept(_visitor, have_pps);
	_visitor.type_field(_type_code->fields[5], 5); vnx::accept(_visitor, latitude);
	_visitor.type_field(_type_code->fields[6], 6); vnx::accept(_visitor, longitude);
	_visitor.type_field(_type_code->fields[7], 7); vnx::accept(_visitor, height);
	_visitor.type_field(_type_code->fields[8], 8); vnx::accept(_visitor, heading);
	_visitor.type_field(_type_code->fields[9], 9); vnx::accept(_visitor, speed);
	_visitor.type_field(_type_code->fields[10], 10); vnx::accept(_visitor, vel_north);
	_visitor.type_field(_type_code->fields[11], 11); vnx::accept(_visitor, vel_east);
	_visitor.type_field(_type_code->fields[12], 12); vnx::accept(_visitor, vel_up);
	_visitor.type_field(_type_code->fields[13], 13); vnx::accept(_visitor, hdop);
	_visitor.type_field(_type_code->fields[14], 14); vnx::accept(_visitor, vdop);
	_visitor.type_field(_type_code->fields[15], 15); vnx::accept(_visitor, num_sats);
	_visitor.type_field(_type_code->fields[16], 16); vnx::accept(_visitor, antenna_pos);
	_visitor.type_end(*_type_code);
}

void GPS_Info::write(std::ostream& _out) const {
	_out << "{";
	_out << "\"time\": "; vnx::write(_out, time);
	_out << ", \"gps_time\": "; vnx::write(_out, gps_time);
	_out << ", \"time_of_week\": "; vnx::write(_out, time_of_week);
	_out << ", \"have_fix\": "; vnx::write(_out, have_fix);
	_out << ", \"have_pps\": "; vnx::write(_out, have_pps);
	_out << ", \"latitude\": "; vnx::write(_out, latitude);
	_out << ", \"longitude\": "; vnx::write(_out, longitude);
	_out << ", \"height\": "; vnx::write(_out, height);
	_out << ", \"heading\": "; vnx::write(_out, heading);
	_out << ", \"speed\": "; vnx::write(_out, speed);
	_out << ", \"vel_north\": "; vnx::write(_out, vel_north);
	_out << ", \"vel_east\": "; vnx::write(_out, vel_east);
	_out << ", \"vel_up\": "; vnx::write(_out, vel_up);
	_out << ", \"hdop\": "; vnx::write(_out, hdop);
	_out << ", \"vdop\": "; vnx::write(_out, vdop);
	_out << ", \"num_sats\": "; vnx::write(_out, num_sats);
	_out << ", \"antenna_pos\": "; vnx::write(_out, antenna_pos);
	_out << "}";
}

void GPS_Info::read(std::istream& _in) {
	std::map<std::string, std::string> _object;
	vnx::read_object(_in, _object);
	for(const auto& _entry : _object) {
		if(_entry.first == "antenna_pos") {
			vnx::from_string(_entry.second, antenna_pos);
		} else if(_entry.first == "gps_time") {
			vnx::from_string(_entry.second, gps_time);
		} else if(_entry.first == "have_fix") {
			vnx::from_string(_entry.second, have_fix);
		} else if(_entry.first == "have_pps") {
			vnx::from_string(_entry.second, have_pps);
		} else if(_entry.first == "hdop") {
			vnx::from_string(_entry.second, hdop);
		} else if(_entry.first == "heading") {
			vnx::from_string(_entry.second, heading);
		} else if(_entry.first == "height") {
			vnx::from_string(_entry.second, height);
		} else if(_entry.first == "latitude") {
			vnx::from_string(_entry.second, latitude);
		} else if(_entry.first == "longitude") {
			vnx::from_string(_entry.second, longitude);
		} else if(_entry.first == "num_sats") {
			vnx::from_string(_entry.second, num_sats);
		} else if(_entry.first == "speed") {
			vnx::from_string(_entry.second, speed);
		} else if(_entry.first == "time") {
			vnx::from_string(_entry.second, time);
		} else if(_entry.first == "time_of_week") {
			vnx::from_string(_entry.second, time_of_week);
		} else if(_entry.first == "vdop") {
			vnx::from_string(_entry.second, vdop);
		} else if(_entry.first == "vel_east") {
			vnx::from_string(_entry.second, vel_east);
		} else if(_entry.first == "vel_north") {
			vnx::from_string(_entry.second, vel_north);
		} else if(_entry.first == "vel_up") {
			vnx::from_string(_entry.second, vel_up);
		}
	}
}

vnx::Object GPS_Info::to_object() const {
	vnx::Object _object;
	_object["time"] = time;
	_object["gps_time"] = gps_time;
	_object["time_of_week"] = time_of_week;
	_object["have_fix"] = have_fix;
	_object["have_pps"] = have_pps;
	_object["latitude"] = latitude;
	_object["longitude"] = longitude;
	_object["height"] = height;
	_object["heading"] = heading;
	_object["speed"] = speed;
	_object["vel_north"] = vel_north;
	_object["vel_east"] = vel_east;
	_object["vel_up"] = vel_up;
	_object["hdop"] = hdop;
	_object["vdop"] = vdop;
	_object["num_sats"] = num_sats;
	_object["antenna_pos"] = antenna_pos;
	return _object;
}

void GPS_Info::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "antenna_pos") {
			_entry.second.to(antenna_pos);
		} else if(_entry.first == "gps_time") {
			_entry.second.to(gps_time);
		} else if(_entry.first == "have_fix") {
			_entry.second.to(have_fix);
		} else if(_entry.first == "have_pps") {
			_entry.second.to(have_pps);
		} else if(_entry.first == "hdop") {
			_entry.second.to(hdop);
		} else if(_entry.first == "heading") {
			_entry.second.to(heading);
		} else if(_entry.first == "height") {
			_entry.second.to(height);
		} else if(_entry.first == "latitude") {
			_entry.second.to(latitude);
		} else if(_entry.first == "longitude") {
			_entry.second.to(longitude);
		} else if(_entry.first == "num_sats") {
			_entry.second.to(num_sats);
		} else if(_entry.first == "speed") {
			_entry.second.to(speed);
		} else if(_entry.first == "time") {
			_entry.second.to(time);
		} else if(_entry.first == "time_of_week") {
			_entry.second.to(time_of_week);
		} else if(_entry.first == "vdop") {
			_entry.second.to(vdop);
		} else if(_entry.first == "vel_east") {
			_entry.second.to(vel_east);
		} else if(_entry.first == "vel_north") {
			_entry.second.to(vel_north);
		} else if(_entry.first == "vel_up") {
			_entry.second.to(vel_up);
		}
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const GPS_Info& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, GPS_Info& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* GPS_Info::get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(vnx::Hash64(0x38402729267c271full));
	if(!type_code) {
		type_code = vnx::register_type_code(create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> GPS_Info::create_type_code() {
	std::shared_ptr<vnx::TypeCode> type_code = std::make_shared<vnx::TypeCode>(true);
	type_code->name = "vehicle.GPS_Info";
	type_code->type_hash = vnx::Hash64(0x38402729267c271full);
	type_code->code_hash = vnx::Hash64(0xf74beda466654469ull);
	type_code->is_class = true;
	type_code->create_value = []() -> std::shared_ptr<vnx::Value> { return std::make_shared<GPS_Info>(); };
	type_code->fields.resize(17);
	{
		vnx::TypeField& field = type_code->fields[0];
		field.name = "time";
		field.code = {8};
	}
	{
		vnx::TypeField& field = type_code->fields[1];
		field.name = "gps_time";
		field.code = {8};
	}
	{
		vnx::TypeField& field = type_code->fields[2];
		field.name = "time_of_week";
		field.code = {3};
	}
	{
		vnx::TypeField& field = type_code->fields[3];
		field.name = "have_fix";
		field.code = {1};
	}
	{
		vnx::TypeField& field = type_code->fields[4];
		field.name = "have_pps";
		field.code = {1};
	}
	{
		vnx::TypeField& field = type_code->fields[5];
		field.name = "latitude";
		field.code = {10};
	}
	{
		vnx::TypeField& field = type_code->fields[6];
		field.name = "longitude";
		field.code = {10};
	}
	{
		vnx::TypeField& field = type_code->fields[7];
		field.name = "height";
		field.code = {10};
	}
	{
		vnx::TypeField& field = type_code->fields[8];
		field.name = "heading";
		field.code = {10};
	}
	{
		vnx::TypeField& field = type_code->fields[9];
		field.name = "speed";
		field.code = {10};
	}
	{
		vnx::TypeField& field = type_code->fields[10];
		field.name = "vel_north";
		field.code = {10};
	}
	{
		vnx::TypeField& field = type_code->fields[11];
		field.name = "vel_east";
		field.code = {10};
	}
	{
		vnx::TypeField& field = type_code->fields[12];
		field.name = "vel_up";
		field.code = {10};
	}
	{
		vnx::TypeField& field = type_code->fields[13];
		field.name = "hdop";
		field.value = vnx::to_string(-1);
		field.code = {9};
	}
	{
		vnx::TypeField& field = type_code->fields[14];
		field.name = "vdop";
		field.value = vnx::to_string(-1);
		field.code = {9};
	}
	{
		vnx::TypeField& field = type_code->fields[15];
		field.name = "num_sats";
		field.value = vnx::to_string(-1);
		field.code = {7};
	}
	{
		vnx::TypeField& field = type_code->fields[16];
		field.is_extended = true;
		field.name = "antenna_pos";
		field.code = {21, 2, 3, 1, 10};
	}
	type_code->build();
	return type_code;
}


} // namespace vehicle


namespace vnx {

void read(TypeInput& in, ::vehicle::GPS_Info& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code) {
		throw std::logic_error("read(): type_code == 0");
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: vnx::skip(in, type_code, code); return;
		}
	}
	const char* const _buf = in.read(type_code->total_field_size);
	{
		const vnx::TypeField* const _field = type_code->field_map[0];
		if(_field) {
			vnx::read_value(_buf + _field->offset, value.time, _field->code.data());
		}
	}
	{
		const vnx::TypeField* const _field = type_code->field_map[1];
		if(_field) {
			vnx::read_value(_buf + _field->offset, value.gps_time, _field->code.data());
		}
	}
	{
		const vnx::TypeField* const _field = type_code->field_map[2];
		if(_field) {
			vnx::read_value(_buf + _field->offset, value.time_of_week, _field->code.data());
		}
	}
	{
		const vnx::TypeField* const _field = type_code->field_map[3];
		if(_field) {
			vnx::read_value(_buf + _field->offset, value.have_fix, _field->code.data());
		}
	}
	{
		const vnx::TypeField* const _field = type_code->field_map[4];
		if(_field) {
			vnx::read_value(_buf + _field->offset, value.have_pps, _field->code.data());
		}
	}
	{
		const vnx::TypeField* const _field = type_code->field_map[5];
		if(_field) {
			vnx::read_value(_buf + _field->offset, value.latitude, _field->code.data());
		}
	}
	{
		const vnx::TypeField* const _field = type_code->field_map[6];
		if(_field) {
			vnx::read_value(_buf + _field->offset, value.longitude, _field->code.data());
		}
	}
	{
		const vnx::TypeField* const _field = type_code->field_map[7];
		if(_field) {
			vnx::read_value(_buf + _field->offset, value.height, _field->code.data());
		}
	}
	{
		const vnx::TypeField* const _field = type_code->field_map[8];
		if(_field) {
			vnx::read_value(_buf + _field->offset, value.heading, _field->code.data());
		}
	}
	{
		const vnx::TypeField* const _field = type_code->field_map[9];
		if(_field) {
			vnx::read_value(_buf + _field->offset, value.speed, _field->code.data());
		}
	}
	{
		const vnx::TypeField* const _field = type_code->field_map[10];
		if(_field) {
			vnx::read_value(_buf + _field->offset, value.vel_north, _field->code.data());
		}
	}
	{
		const vnx::TypeField* const _field = type_code->field_map[11];
		if(_field) {
			vnx::read_value(_buf + _field->offset, value.vel_east, _field->code.data());
		}
	}
	{
		const vnx::TypeField* const _field = type_code->field_map[12];
		if(_field) {
			vnx::read_value(_buf + _field->offset, value.vel_up, _field->code.data());
		}
	}
	{
		const vnx::TypeField* const _field = type_code->field_map[13];
		if(_field) {
			vnx::read_value(_buf + _field->offset, value.hdop, _field->code.data());
		}
	}
	{
		const vnx::TypeField* const _field = type_code->field_map[14];
		if(_field) {
			vnx::read_value(_buf + _field->offset, value.vdop, _field->code.data());
		}
	}
	{
		const vnx::TypeField* const _field = type_code->field_map[15];
		if(_field) {
			vnx::read_value(_buf + _field->offset, value.num_sats, _field->code.data());
		}
	}
	for(const vnx::TypeField* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			case 16: vnx::read(in, value.antenna_pos, type_code, _field->code.data()); break;
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::vehicle::GPS_Info& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = vnx::write_type_code<::vehicle::GPS_Info>(out);
		vnx::write_class_header<::vehicle::GPS_Info>(out);
	}
	if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	char* const _buf = out.write(98);
	vnx::write_value(_buf + 0, value.time);
	vnx::write_value(_buf + 8, value.gps_time);
	vnx::write_value(_buf + 16, value.time_of_week);
	vnx::write_value(_buf + 20, value.have_fix);
	vnx::write_value(_buf + 21, value.have_pps);
	vnx::write_value(_buf + 22, value.latitude);
	vnx::write_value(_buf + 30, value.longitude);
	vnx::write_value(_buf + 38, value.height);
	vnx::write_value(_buf + 46, value.heading);
	vnx::write_value(_buf + 54, value.speed);
	vnx::write_value(_buf + 62, value.vel_north);
	vnx::write_value(_buf + 70, value.vel_east);
	vnx::write_value(_buf + 78, value.vel_up);
	vnx::write_value(_buf + 86, value.hdop);
	vnx::write_value(_buf + 90, value.vdop);
	vnx::write_value(_buf + 94, value.num_sats);
	vnx::write(out, value.antenna_pos, type_code, type_code->fields[16].code.data());
}

void read(std::istream& in, ::vehicle::GPS_Info& value) {
	value.read(in);
}

void write(std::ostream& out, const ::vehicle::GPS_Info& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::vehicle::GPS_Info& value) {
	value.accept(visitor);
}

} // vnx
