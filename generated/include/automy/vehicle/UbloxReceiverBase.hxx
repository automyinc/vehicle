
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_automy_vehicle_UbloxReceiverBase_HXX_
#define INCLUDE_automy_vehicle_UbloxReceiverBase_HXX_

#include <automy/vehicle/package.hxx>
#include <automy/math/Vector3d.h>
#include <automy/vehicle/PPS_Signal.hxx>
#include <automy/vehicle/UBX_Packet.hxx>
#include <vnx/Module.h>
#include <vnx/TopicPtr.h>


namespace automy {
namespace vehicle {

class UbloxReceiverBase : public ::vnx::Module {
public:
	
	::vnx::TopicPtr output = "vehicle.gps_info";
	::vnx::TopicPtr topic_msgs = "vehicle.ubx_msgs";
	::vnx::TopicPtr input_pps;
	::std::string port = "/dev/ttyACM0";
	::int32_t baudrate = 115200;
	::automy::math::Vector3d antenna_pos;
	
	typedef ::vnx::Module Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	UbloxReceiverBase(const std::string& _vnx_name);
	
	vnx::Hash64 get_type_hash() const;
	const char* get_type_name() const;
	
	void read(std::istream& _in);
	void write(std::ostream& _out) const;
	
	void accept(vnx::Visitor& _visitor) const;
	
	vnx::Object to_object() const;
	void from_object(const vnx::Object& object);
	
	friend std::ostream& operator<<(std::ostream& _out, const UbloxReceiverBase& _value);
	friend std::istream& operator>>(std::istream& _in, UbloxReceiverBase& _value);
	
	static const vnx::TypeCode* get_type_code();
	static std::shared_ptr<vnx::TypeCode> create_type_code();
	
protected:
	virtual void handle(std::shared_ptr<const ::automy::vehicle::PPS_Signal> _value, std::shared_ptr<const ::vnx::Sample> _sample) { handle(_value); }
	virtual void handle(std::shared_ptr<const ::automy::vehicle::PPS_Signal> _value) {}
	virtual void handle(std::shared_ptr<const ::automy::vehicle::UBX_Packet> _value, std::shared_ptr<const ::vnx::Sample> _sample) { handle(_value); }
	virtual void handle(std::shared_ptr<const ::automy::vehicle::UBX_Packet> _value) {}
	
	void handle_switch(std::shared_ptr<const ::vnx::Sample> _sample);
	bool call_switch(vnx::TypeInput& _in, vnx::TypeOutput& _out, const vnx::TypeCode* _call_type, const vnx::TypeCode* _return_type);
	
};


} // namespace automy
} // namespace vehicle

#endif // INCLUDE_automy_vehicle_UbloxReceiverBase_HXX_
