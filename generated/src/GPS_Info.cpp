
// AUTO GENERATED by vnxcppcodegen

#include <automy/vehicle/package.hxx>
#include <automy/vehicle/GPS_Info.hxx>
#include <automy/math/Vector3d.hpp>
#include <vnx/Value.h>

#include <vnx/vnx.h>


namespace automy {
namespace vehicle {


const vnx::Hash64 GPS_Info::VNX_TYPE_HASH(0xbd0d89a3f33315e3ull);
const vnx::Hash64 GPS_Info::VNX_CODE_HASH(0x301762187839a323ull);

vnx::Hash64 GPS_Info::get_type_hash() const {
	return VNX_TYPE_HASH;
}

std::string GPS_Info::get_type_name() const {
	return "automy.vehicle.GPS_Info";
}

const vnx::TypeCode* GPS_Info::get_type_code() const {
	return automy::vehicle::vnx_native_type_code_GPS_Info;
}

std::shared_ptr<GPS_Info> GPS_Info::create() {
	return std::make_shared<GPS_Info>();
}

std::shared_ptr<vnx::Value> GPS_Info::clone() const {
	return std::make_shared<GPS_Info>(*this);
}

void GPS_Info::read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) {
	vnx::read(_in, *this, _type_code, _code);
}

void GPS_Info::write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const {
	vnx::write(_out, *this, _type_code, _code);
}

void GPS_Info::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = automy::vehicle::vnx_native_type_code_GPS_Info;
	_visitor.type_begin(*_type_code);
	_visitor.type_field(_type_code->fields[0], 0); vnx::accept(_visitor, time);
	_visitor.type_field(_type_code->fields[1], 1); vnx::accept(_visitor, gps_time);
	_visitor.type_field(_type_code->fields[2], 2); vnx::accept(_visitor, time_of_week);
	_visitor.type_field(_type_code->fields[3], 3); vnx::accept(_visitor, have_fix);
	_visitor.type_field(_type_code->fields[4], 4); vnx::accept(_visitor, have_pps);
	_visitor.type_field(_type_code->fields[5], 5); vnx::accept(_visitor, latitude);
	_visitor.type_field(_type_code->fields[6], 6); vnx::accept(_visitor, longitude);
	_visitor.type_field(_type_code->fields[7], 7); vnx::accept(_visitor, height);
	_visitor.type_field(_type_code->fields[8], 8); vnx::accept(_visitor, heading);
	_visitor.type_field(_type_code->fields[9], 9); vnx::accept(_visitor, speed);
	_visitor.type_field(_type_code->fields[10], 10); vnx::accept(_visitor, vel_north);
	_visitor.type_field(_type_code->fields[11], 11); vnx::accept(_visitor, vel_east);
	_visitor.type_field(_type_code->fields[12], 12); vnx::accept(_visitor, vel_up);
	_visitor.type_field(_type_code->fields[13], 13); vnx::accept(_visitor, hdop);
	_visitor.type_field(_type_code->fields[14], 14); vnx::accept(_visitor, vdop);
	_visitor.type_field(_type_code->fields[15], 15); vnx::accept(_visitor, num_sats);
	_visitor.type_field(_type_code->fields[16], 16); vnx::accept(_visitor, antenna_pos);
	_visitor.type_end(*_type_code);
}

void GPS_Info::write(std::ostream& _out) const {
	_out << "{\"__type\": \"automy.vehicle.GPS_Info\"";
	_out << ", \"time\": "; vnx::write(_out, time);
	_out << ", \"gps_time\": "; vnx::write(_out, gps_time);
	_out << ", \"time_of_week\": "; vnx::write(_out, time_of_week);
	_out << ", \"have_fix\": "; vnx::write(_out, have_fix);
	_out << ", \"have_pps\": "; vnx::write(_out, have_pps);
	_out << ", \"latitude\": "; vnx::write(_out, latitude);
	_out << ", \"longitude\": "; vnx::write(_out, longitude);
	_out << ", \"height\": "; vnx::write(_out, height);
	_out << ", \"heading\": "; vnx::write(_out, heading);
	_out << ", \"speed\": "; vnx::write(_out, speed);
	_out << ", \"vel_north\": "; vnx::write(_out, vel_north);
	_out << ", \"vel_east\": "; vnx::write(_out, vel_east);
	_out << ", \"vel_up\": "; vnx::write(_out, vel_up);
	_out << ", \"hdop\": "; vnx::write(_out, hdop);
	_out << ", \"vdop\": "; vnx::write(_out, vdop);
	_out << ", \"num_sats\": "; vnx::write(_out, num_sats);
	_out << ", \"antenna_pos\": "; vnx::write(_out, antenna_pos);
	_out << "}";
}

void GPS_Info::read(std::istream& _in) {
	if(auto _json = vnx::read_json(_in)) {
		from_object(_json->to_object());
	}
}

vnx::Object GPS_Info::to_object() const {
	vnx::Object _object;
	_object["__type"] = "automy.vehicle.GPS_Info";
	_object["time"] = time;
	_object["gps_time"] = gps_time;
	_object["time_of_week"] = time_of_week;
	_object["have_fix"] = have_fix;
	_object["have_pps"] = have_pps;
	_object["latitude"] = latitude;
	_object["longitude"] = longitude;
	_object["height"] = height;
	_object["heading"] = heading;
	_object["speed"] = speed;
	_object["vel_north"] = vel_north;
	_object["vel_east"] = vel_east;
	_object["vel_up"] = vel_up;
	_object["hdop"] = hdop;
	_object["vdop"] = vdop;
	_object["num_sats"] = num_sats;
	_object["antenna_pos"] = antenna_pos;
	return _object;
}

void GPS_Info::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "antenna_pos") {
			_entry.second.to(antenna_pos);
		} else if(_entry.first == "gps_time") {
			_entry.second.to(gps_time);
		} else if(_entry.first == "have_fix") {
			_entry.second.to(have_fix);
		} else if(_entry.first == "have_pps") {
			_entry.second.to(have_pps);
		} else if(_entry.first == "hdop") {
			_entry.second.to(hdop);
		} else if(_entry.first == "heading") {
			_entry.second.to(heading);
		} else if(_entry.first == "height") {
			_entry.second.to(height);
		} else if(_entry.first == "latitude") {
			_entry.second.to(latitude);
		} else if(_entry.first == "longitude") {
			_entry.second.to(longitude);
		} else if(_entry.first == "num_sats") {
			_entry.second.to(num_sats);
		} else if(_entry.first == "speed") {
			_entry.second.to(speed);
		} else if(_entry.first == "time") {
			_entry.second.to(time);
		} else if(_entry.first == "time_of_week") {
			_entry.second.to(time_of_week);
		} else if(_entry.first == "vdop") {
			_entry.second.to(vdop);
		} else if(_entry.first == "vel_east") {
			_entry.second.to(vel_east);
		} else if(_entry.first == "vel_north") {
			_entry.second.to(vel_north);
		} else if(_entry.first == "vel_up") {
			_entry.second.to(vel_up);
		}
	}
}

vnx::Variant GPS_Info::get_field(const std::string& _name) const {
	if(_name == "time") {
		return vnx::Variant(time);
	}
	if(_name == "gps_time") {
		return vnx::Variant(gps_time);
	}
	if(_name == "time_of_week") {
		return vnx::Variant(time_of_week);
	}
	if(_name == "have_fix") {
		return vnx::Variant(have_fix);
	}
	if(_name == "have_pps") {
		return vnx::Variant(have_pps);
	}
	if(_name == "latitude") {
		return vnx::Variant(latitude);
	}
	if(_name == "longitude") {
		return vnx::Variant(longitude);
	}
	if(_name == "height") {
		return vnx::Variant(height);
	}
	if(_name == "heading") {
		return vnx::Variant(heading);
	}
	if(_name == "speed") {
		return vnx::Variant(speed);
	}
	if(_name == "vel_north") {
		return vnx::Variant(vel_north);
	}
	if(_name == "vel_east") {
		return vnx::Variant(vel_east);
	}
	if(_name == "vel_up") {
		return vnx::Variant(vel_up);
	}
	if(_name == "hdop") {
		return vnx::Variant(hdop);
	}
	if(_name == "vdop") {
		return vnx::Variant(vdop);
	}
	if(_name == "num_sats") {
		return vnx::Variant(num_sats);
	}
	if(_name == "antenna_pos") {
		return vnx::Variant(antenna_pos);
	}
	return vnx::Variant();
}

void GPS_Info::set_field(const std::string& _name, const vnx::Variant& _value) {
	if(_name == "time") {
		_value.to(time);
	} else if(_name == "gps_time") {
		_value.to(gps_time);
	} else if(_name == "time_of_week") {
		_value.to(time_of_week);
	} else if(_name == "have_fix") {
		_value.to(have_fix);
	} else if(_name == "have_pps") {
		_value.to(have_pps);
	} else if(_name == "latitude") {
		_value.to(latitude);
	} else if(_name == "longitude") {
		_value.to(longitude);
	} else if(_name == "height") {
		_value.to(height);
	} else if(_name == "heading") {
		_value.to(heading);
	} else if(_name == "speed") {
		_value.to(speed);
	} else if(_name == "vel_north") {
		_value.to(vel_north);
	} else if(_name == "vel_east") {
		_value.to(vel_east);
	} else if(_name == "vel_up") {
		_value.to(vel_up);
	} else if(_name == "hdop") {
		_value.to(hdop);
	} else if(_name == "vdop") {
		_value.to(vdop);
	} else if(_name == "num_sats") {
		_value.to(num_sats);
	} else if(_name == "antenna_pos") {
		_value.to(antenna_pos);
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const GPS_Info& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, GPS_Info& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* GPS_Info::static_get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(VNX_TYPE_HASH);
	if(!type_code) {
		type_code = vnx::register_type_code(static_create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> GPS_Info::static_create_type_code() {
	auto type_code = std::make_shared<vnx::TypeCode>();
	type_code->name = "automy.vehicle.GPS_Info";
	type_code->type_hash = vnx::Hash64(0xbd0d89a3f33315e3ull);
	type_code->code_hash = vnx::Hash64(0x301762187839a323ull);
	type_code->is_native = true;
	type_code->is_class = true;
	type_code->native_size = sizeof(::automy::vehicle::GPS_Info);
	type_code->create_value = []() -> std::shared_ptr<vnx::Value> { return std::make_shared<GPS_Info>(); };
	type_code->fields.resize(17);
	{
		auto& field = type_code->fields[0];
		field.data_size = 8;
		field.name = "time";
		field.code = {8};
	}
	{
		auto& field = type_code->fields[1];
		field.data_size = 8;
		field.name = "gps_time";
		field.code = {8};
	}
	{
		auto& field = type_code->fields[2];
		field.data_size = 4;
		field.name = "time_of_week";
		field.code = {3};
	}
	{
		auto& field = type_code->fields[3];
		field.data_size = 1;
		field.name = "have_fix";
		field.code = {31};
	}
	{
		auto& field = type_code->fields[4];
		field.data_size = 1;
		field.name = "have_pps";
		field.code = {31};
	}
	{
		auto& field = type_code->fields[5];
		field.data_size = 8;
		field.name = "latitude";
		field.code = {10};
	}
	{
		auto& field = type_code->fields[6];
		field.data_size = 8;
		field.name = "longitude";
		field.code = {10};
	}
	{
		auto& field = type_code->fields[7];
		field.data_size = 8;
		field.name = "height";
		field.code = {10};
	}
	{
		auto& field = type_code->fields[8];
		field.data_size = 8;
		field.name = "heading";
		field.code = {10};
	}
	{
		auto& field = type_code->fields[9];
		field.data_size = 8;
		field.name = "speed";
		field.code = {10};
	}
	{
		auto& field = type_code->fields[10];
		field.data_size = 8;
		field.name = "vel_north";
		field.code = {10};
	}
	{
		auto& field = type_code->fields[11];
		field.data_size = 8;
		field.name = "vel_east";
		field.code = {10};
	}
	{
		auto& field = type_code->fields[12];
		field.data_size = 8;
		field.name = "vel_up";
		field.code = {10};
	}
	{
		auto& field = type_code->fields[13];
		field.data_size = 4;
		field.name = "hdop";
		field.value = vnx::to_string(-1);
		field.code = {9};
	}
	{
		auto& field = type_code->fields[14];
		field.data_size = 4;
		field.name = "vdop";
		field.value = vnx::to_string(-1);
		field.code = {9};
	}
	{
		auto& field = type_code->fields[15];
		field.data_size = 4;
		field.name = "num_sats";
		field.value = vnx::to_string(-1);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[16];
		field.is_extended = true;
		field.name = "antenna_pos";
		field.code = {21, 2, 3, 1, 10};
	}
	type_code->build();
	return type_code;
}

std::shared_ptr<vnx::Value> GPS_Info::vnx_call_switch(std::shared_ptr<const vnx::Value> _method) {
	switch(_method->get_type_hash()) {
	}
	return nullptr;
}


} // namespace automy
} // namespace vehicle


namespace vnx {

void read(TypeInput& in, ::automy::vehicle::GPS_Info& value, const TypeCode* type_code, const uint16_t* code) {
	if(code) {
		switch(code[0]) {
			case CODE_OBJECT:
			case CODE_ALT_OBJECT: {
				Object tmp;
				vnx::read(in, tmp, type_code, code);
				value.from_object(tmp);
				return;
			}
			case CODE_DYNAMIC:
			case CODE_ALT_DYNAMIC:
				vnx::read_dynamic(in, value);
				return;
		}
	}
	if(!type_code) {
		vnx::skip(in, type_code, code);
		return;
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: {
				vnx::skip(in, type_code, code);
				return;
			}
		}
	}
	const auto* const _buf = in.read(type_code->total_field_size);
	if(type_code->is_matched) {
		if(const auto* const _field = type_code->field_map[0]) {
			vnx::read_value(_buf + _field->offset, value.time, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[1]) {
			vnx::read_value(_buf + _field->offset, value.gps_time, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[2]) {
			vnx::read_value(_buf + _field->offset, value.time_of_week, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[3]) {
			vnx::read_value(_buf + _field->offset, value.have_fix, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[4]) {
			vnx::read_value(_buf + _field->offset, value.have_pps, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[5]) {
			vnx::read_value(_buf + _field->offset, value.latitude, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[6]) {
			vnx::read_value(_buf + _field->offset, value.longitude, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[7]) {
			vnx::read_value(_buf + _field->offset, value.height, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[8]) {
			vnx::read_value(_buf + _field->offset, value.heading, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[9]) {
			vnx::read_value(_buf + _field->offset, value.speed, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[10]) {
			vnx::read_value(_buf + _field->offset, value.vel_north, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[11]) {
			vnx::read_value(_buf + _field->offset, value.vel_east, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[12]) {
			vnx::read_value(_buf + _field->offset, value.vel_up, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[13]) {
			vnx::read_value(_buf + _field->offset, value.hdop, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[14]) {
			vnx::read_value(_buf + _field->offset, value.vdop, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[15]) {
			vnx::read_value(_buf + _field->offset, value.num_sats, _field->code.data());
		}
	}
	for(const auto* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			case 16: vnx::read(in, value.antenna_pos, type_code, _field->code.data()); break;
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::automy::vehicle::GPS_Info& value, const TypeCode* type_code, const uint16_t* code) {
	if(code && code[0] == CODE_OBJECT) {
		vnx::write(out, value.to_object(), nullptr, code);
		return;
	}
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = automy::vehicle::vnx_native_type_code_GPS_Info;
		out.write_type_code(type_code);
		vnx::write_class_header<::automy::vehicle::GPS_Info>(out);
	}
	else if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	auto* const _buf = out.write(98);
	vnx::write_value(_buf + 0, value.time);
	vnx::write_value(_buf + 8, value.gps_time);
	vnx::write_value(_buf + 16, value.time_of_week);
	vnx::write_value(_buf + 20, value.have_fix);
	vnx::write_value(_buf + 21, value.have_pps);
	vnx::write_value(_buf + 22, value.latitude);
	vnx::write_value(_buf + 30, value.longitude);
	vnx::write_value(_buf + 38, value.height);
	vnx::write_value(_buf + 46, value.heading);
	vnx::write_value(_buf + 54, value.speed);
	vnx::write_value(_buf + 62, value.vel_north);
	vnx::write_value(_buf + 70, value.vel_east);
	vnx::write_value(_buf + 78, value.vel_up);
	vnx::write_value(_buf + 86, value.hdop);
	vnx::write_value(_buf + 90, value.vdop);
	vnx::write_value(_buf + 94, value.num_sats);
	vnx::write(out, value.antenna_pos, type_code, type_code->fields[16].code.data());
}

void read(std::istream& in, ::automy::vehicle::GPS_Info& value) {
	value.read(in);
}

void write(std::ostream& out, const ::automy::vehicle::GPS_Info& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::automy::vehicle::GPS_Info& value) {
	value.accept(visitor);
}

} // vnx
