
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_vehicle_PACKAGE_HXX_
#define INCLUDE_vehicle_PACKAGE_HXX_

#include <vnx/Type.h>

#include <basic/package.hxx>
#include <math/package.hxx>


namespace vehicle {


class Odometry;

} // namespace vehicle


namespace vnx {

void read(TypeInput& in, ::vehicle::Odometry& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void write(TypeOutput& out, const ::vehicle::Odometry& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void read(std::istream& in, ::vehicle::Odometry& value); ///< \private

void write(std::ostream& out, const ::vehicle::Odometry& value); ///< \private

void accept(Visitor& visitor, const ::vehicle::Odometry& value); ///< \private

/// \private
template<>
struct type<::vehicle::Odometry> {
	void read(TypeInput& in, ::vehicle::Odometry& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::vehicle::Odometry& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::vehicle::Odometry& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::vehicle::Odometry& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::vehicle::Odometry& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code) {
		code.push_back(CODE_ANY);
	}
};


} // namespace vnx

#endif // INCLUDE_vehicle_PACKAGE_HXX_
