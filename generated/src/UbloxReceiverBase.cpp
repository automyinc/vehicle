
// AUTO GENERATED by vnxcppcodegen

#include <automy/vehicle/package.hxx>
#include <automy/vehicle/UbloxReceiverBase.hxx>
#include <vnx/NoSuchMethod.hxx>
#include <automy/math/Vector3d.hpp>
#include <automy/vehicle/PPS_Signal.hxx>
#include <automy/vehicle/UBX_Packet.hxx>
#include <vnx/Module.h>
#include <vnx/ModuleInterface_vnx_get_config.hxx>
#include <vnx/ModuleInterface_vnx_get_config_return.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info_return.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code_return.hxx>
#include <vnx/ModuleInterface_vnx_restart.hxx>
#include <vnx/ModuleInterface_vnx_restart_return.hxx>
#include <vnx/ModuleInterface_vnx_self_test.hxx>
#include <vnx/ModuleInterface_vnx_self_test_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config.hxx>
#include <vnx/ModuleInterface_vnx_set_config_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_stop.hxx>
#include <vnx/ModuleInterface_vnx_stop_return.hxx>
#include <vnx/TopicPtr.hpp>

#include <vnx/vnx.h>


namespace automy {
namespace vehicle {


const vnx::Hash64 UbloxReceiverBase::VNX_TYPE_HASH(0x569529e56d14ec5bull);
const vnx::Hash64 UbloxReceiverBase::VNX_CODE_HASH(0x88e03adee15a2341ull);

UbloxReceiverBase::UbloxReceiverBase(const std::string& _vnx_name)
	:	Module::Module(_vnx_name)
{
	vnx::read_config(vnx_name + ".output", output);
	vnx::read_config(vnx_name + ".topic_msgs", topic_msgs);
	vnx::read_config(vnx_name + ".input_pps", input_pps);
	vnx::read_config(vnx_name + ".port", port);
	vnx::read_config(vnx_name + ".baudrate", baudrate);
	vnx::read_config(vnx_name + ".antenna_pos", antenna_pos);
}

vnx::Hash64 UbloxReceiverBase::get_type_hash() const {
	return VNX_TYPE_HASH;
}

std::string UbloxReceiverBase::get_type_name() const {
	return "automy.vehicle.UbloxReceiver";
}

const vnx::TypeCode* UbloxReceiverBase::get_type_code() const {
	return automy::vehicle::vnx_native_type_code_UbloxReceiverBase;
}

void UbloxReceiverBase::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = automy::vehicle::vnx_native_type_code_UbloxReceiverBase;
	_visitor.type_begin(*_type_code);
	_visitor.type_field(_type_code->fields[0], 0); vnx::accept(_visitor, output);
	_visitor.type_field(_type_code->fields[1], 1); vnx::accept(_visitor, topic_msgs);
	_visitor.type_field(_type_code->fields[2], 2); vnx::accept(_visitor, input_pps);
	_visitor.type_field(_type_code->fields[3], 3); vnx::accept(_visitor, port);
	_visitor.type_field(_type_code->fields[4], 4); vnx::accept(_visitor, baudrate);
	_visitor.type_field(_type_code->fields[5], 5); vnx::accept(_visitor, antenna_pos);
	_visitor.type_end(*_type_code);
}

void UbloxReceiverBase::write(std::ostream& _out) const {
	_out << "{";
	_out << "\"output\": "; vnx::write(_out, output);
	_out << ", \"topic_msgs\": "; vnx::write(_out, topic_msgs);
	_out << ", \"input_pps\": "; vnx::write(_out, input_pps);
	_out << ", \"port\": "; vnx::write(_out, port);
	_out << ", \"baudrate\": "; vnx::write(_out, baudrate);
	_out << ", \"antenna_pos\": "; vnx::write(_out, antenna_pos);
	_out << "}";
}

void UbloxReceiverBase::read(std::istream& _in) {
	if(auto _json = vnx::read_json(_in)) {
		from_object(_json->to_object());
	}
}

vnx::Object UbloxReceiverBase::to_object() const {
	vnx::Object _object;
	_object["__type"] = "automy.vehicle.UbloxReceiver";
	_object["output"] = output;
	_object["topic_msgs"] = topic_msgs;
	_object["input_pps"] = input_pps;
	_object["port"] = port;
	_object["baudrate"] = baudrate;
	_object["antenna_pos"] = antenna_pos;
	return _object;
}

void UbloxReceiverBase::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "antenna_pos") {
			_entry.second.to(antenna_pos);
		} else if(_entry.first == "baudrate") {
			_entry.second.to(baudrate);
		} else if(_entry.first == "input_pps") {
			_entry.second.to(input_pps);
		} else if(_entry.first == "output") {
			_entry.second.to(output);
		} else if(_entry.first == "port") {
			_entry.second.to(port);
		} else if(_entry.first == "topic_msgs") {
			_entry.second.to(topic_msgs);
		}
	}
}

vnx::Variant UbloxReceiverBase::get_field(const std::string& _name) const {
	if(_name == "output") {
		return vnx::Variant(output);
	}
	if(_name == "topic_msgs") {
		return vnx::Variant(topic_msgs);
	}
	if(_name == "input_pps") {
		return vnx::Variant(input_pps);
	}
	if(_name == "port") {
		return vnx::Variant(port);
	}
	if(_name == "baudrate") {
		return vnx::Variant(baudrate);
	}
	if(_name == "antenna_pos") {
		return vnx::Variant(antenna_pos);
	}
	return vnx::Variant();
}

void UbloxReceiverBase::set_field(const std::string& _name, const vnx::Variant& _value) {
	if(_name == "output") {
		_value.to(output);
	} else if(_name == "topic_msgs") {
		_value.to(topic_msgs);
	} else if(_name == "input_pps") {
		_value.to(input_pps);
	} else if(_name == "port") {
		_value.to(port);
	} else if(_name == "baudrate") {
		_value.to(baudrate);
	} else if(_name == "antenna_pos") {
		_value.to(antenna_pos);
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const UbloxReceiverBase& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, UbloxReceiverBase& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* UbloxReceiverBase::static_get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(VNX_TYPE_HASH);
	if(!type_code) {
		type_code = vnx::register_type_code(static_create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> UbloxReceiverBase::static_create_type_code() {
	auto type_code = std::make_shared<vnx::TypeCode>();
	type_code->name = "automy.vehicle.UbloxReceiver";
	type_code->type_hash = vnx::Hash64(0x569529e56d14ec5bull);
	type_code->code_hash = vnx::Hash64(0x88e03adee15a2341ull);
	type_code->is_native = true;
	type_code->native_size = sizeof(::automy::vehicle::UbloxReceiverBase);
	type_code->methods.resize(9);
	type_code->methods[0] = ::vnx::ModuleInterface_vnx_get_config::static_get_type_code();
	type_code->methods[1] = ::vnx::ModuleInterface_vnx_get_config_object::static_get_type_code();
	type_code->methods[2] = ::vnx::ModuleInterface_vnx_get_module_info::static_get_type_code();
	type_code->methods[3] = ::vnx::ModuleInterface_vnx_get_type_code::static_get_type_code();
	type_code->methods[4] = ::vnx::ModuleInterface_vnx_restart::static_get_type_code();
	type_code->methods[5] = ::vnx::ModuleInterface_vnx_self_test::static_get_type_code();
	type_code->methods[6] = ::vnx::ModuleInterface_vnx_set_config::static_get_type_code();
	type_code->methods[7] = ::vnx::ModuleInterface_vnx_set_config_object::static_get_type_code();
	type_code->methods[8] = ::vnx::ModuleInterface_vnx_stop::static_get_type_code();
	type_code->fields.resize(6);
	{
		auto& field = type_code->fields[0];
		field.is_extended = true;
		field.name = "output";
		field.value = vnx::to_string("vehicle.gps_info");
		field.code = {12, 5};
	}
	{
		auto& field = type_code->fields[1];
		field.is_extended = true;
		field.name = "topic_msgs";
		field.value = vnx::to_string("vehicle.ubx_msgs");
		field.code = {12, 5};
	}
	{
		auto& field = type_code->fields[2];
		field.is_extended = true;
		field.name = "input_pps";
		field.code = {12, 5};
	}
	{
		auto& field = type_code->fields[3];
		field.is_extended = true;
		field.name = "port";
		field.value = vnx::to_string("/dev/ttyACM0");
		field.code = {32};
	}
	{
		auto& field = type_code->fields[4];
		field.data_size = 4;
		field.name = "baudrate";
		field.value = vnx::to_string(115200);
		field.code = {7};
	}
	{
		auto& field = type_code->fields[5];
		field.is_extended = true;
		field.name = "antenna_pos";
		field.code = {21, 2, 3, 1, 10};
	}
	type_code->build();
	return type_code;
}

void UbloxReceiverBase::vnx_handle_switch(std::shared_ptr<const vnx::Value> _value) {
	const auto* _type_code = _value->get_type_code();
	while(_type_code) {
		switch(_type_code->type_hash) {
			case 0x392798cc0d63fa9bull:
				handle(std::static_pointer_cast<const ::automy::vehicle::PPS_Signal>(_value));
				return;
			case 0x1a2f67e7bc19cf95ull:
				handle(std::static_pointer_cast<const ::automy::vehicle::UBX_Packet>(_value));
				return;
			default:
				_type_code = _type_code->super;
		}
	}
	handle(std::static_pointer_cast<const vnx::Value>(_value));
}

std::shared_ptr<vnx::Value> UbloxReceiverBase::vnx_call_switch(std::shared_ptr<const vnx::Value> _method, const vnx::request_id_t& _request_id) {
	switch(_method->get_type_hash()) {
		case 0xbbc7f1a01044d294ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_config_return::create();
			_return_value->_ret_0 = vnx_get_config(_args->name);
			return _return_value;
		}
		case 0x17f58f68bf83abc0ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config_object>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_config_object_return::create();
			_return_value->_ret_0 = vnx_get_config_object();
			return _return_value;
		}
		case 0xf6d82bdf66d034a1ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_module_info>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_module_info_return::create();
			_return_value->_ret_0 = vnx_get_module_info();
			return _return_value;
		}
		case 0x305ec4d628960e5dull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_get_type_code>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_get_type_code_return::create();
			_return_value->_ret_0 = vnx_get_type_code();
			return _return_value;
		}
		case 0x9e95dc280cecca1bull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_restart>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_restart_return::create();
			vnx_restart();
			return _return_value;
		}
		case 0x6ce3775b41a42697ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_self_test>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_self_test_return::create();
			_return_value->_ret_0 = vnx_self_test();
			return _return_value;
		}
		case 0x362aac91373958b7ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_set_config>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_set_config_return::create();
			vnx_set_config(_args->name, _args->value);
			return _return_value;
		}
		case 0xca30f814f17f322full: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_set_config_object>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_set_config_object_return::create();
			vnx_set_config_object(_args->config);
			return _return_value;
		}
		case 0x7ab49ce3d1bfc0d2ull: {
			auto _args = std::static_pointer_cast<const ::vnx::ModuleInterface_vnx_stop>(_method);
			auto _return_value = ::vnx::ModuleInterface_vnx_stop_return::create();
			vnx_stop();
			return _return_value;
		}
	}
	auto _ex = vnx::NoSuchMethod::create();
	_ex->dst_mac = vnx_request ? vnx_request->dst_mac : vnx::Hash64();
	_ex->method = _method->get_type_name();
	return _ex;
}


} // namespace automy
} // namespace vehicle


namespace vnx {

void read(TypeInput& in, ::automy::vehicle::UbloxReceiverBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(code) {
		switch(code[0]) {
			case CODE_OBJECT:
			case CODE_ALT_OBJECT: {
				Object tmp;
				vnx::read(in, tmp, type_code, code);
				value.from_object(tmp);
				return;
			}
			case CODE_DYNAMIC:
			case CODE_ALT_DYNAMIC:
				vnx::read_dynamic(in, value);
				return;
		}
	}
	if(!type_code) {
		vnx::skip(in, type_code, code);
		return;
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: {
				vnx::skip(in, type_code, code);
				return;
			}
		}
	}
	const auto* const _buf = in.read(type_code->total_field_size);
	if(type_code->is_matched) {
		if(const auto* const _field = type_code->field_map[4]) {
			vnx::read_value(_buf + _field->offset, value.baudrate, _field->code.data());
		}
	}
	for(const auto* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			case 0: vnx::read(in, value.output, type_code, _field->code.data()); break;
			case 1: vnx::read(in, value.topic_msgs, type_code, _field->code.data()); break;
			case 2: vnx::read(in, value.input_pps, type_code, _field->code.data()); break;
			case 3: vnx::read(in, value.port, type_code, _field->code.data()); break;
			case 5: vnx::read(in, value.antenna_pos, type_code, _field->code.data()); break;
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::automy::vehicle::UbloxReceiverBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(code && code[0] == CODE_OBJECT) {
		vnx::write(out, value.to_object(), nullptr, code);
		return;
	}
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = automy::vehicle::vnx_native_type_code_UbloxReceiverBase;
		out.write_type_code(type_code);
		vnx::write_class_header<::automy::vehicle::UbloxReceiverBase>(out);
	}
	else if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	auto* const _buf = out.write(4);
	vnx::write_value(_buf + 0, value.baudrate);
	vnx::write(out, value.output, type_code, type_code->fields[0].code.data());
	vnx::write(out, value.topic_msgs, type_code, type_code->fields[1].code.data());
	vnx::write(out, value.input_pps, type_code, type_code->fields[2].code.data());
	vnx::write(out, value.port, type_code, type_code->fields[3].code.data());
	vnx::write(out, value.antenna_pos, type_code, type_code->fields[5].code.data());
}

void read(std::istream& in, ::automy::vehicle::UbloxReceiverBase& value) {
	value.read(in);
}

void write(std::ostream& out, const ::automy::vehicle::UbloxReceiverBase& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::automy::vehicle::UbloxReceiverBase& value) {
	value.accept(visitor);
}

} // vnx
