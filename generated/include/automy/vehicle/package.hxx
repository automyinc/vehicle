
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_automy_vehicle_PACKAGE_HXX_
#define INCLUDE_automy_vehicle_PACKAGE_HXX_

#include <vnx/Type.h>

#include <automy/basic/package.hxx>
#include <automy/math/package.hxx>
#include <vnx/package.hxx>

#ifdef AUTOMY_VEHICLE_EXPORT_ENABLE
#include <automy_vehicle_export.h>
#else
#ifndef AUTOMY_VEHICLE_EXPORT
#define AUTOMY_VEHICLE_EXPORT
#endif
#endif


namespace automy {
namespace vehicle {

void register_all_types();


class GPIO_PPS_ReceiverBase;
class GPS_Info;
class IMU_Info;
class Odometry;
class PPS_Signal;
class UBX_Packet;
class UbloxReceiverBase;
class VehicleDimensions;
class VehicleInfo;
class WheelSpeed;

AUTOMY_VEHICLE_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_GPIO_PPS_ReceiverBase; ///< \private
AUTOMY_VEHICLE_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_GPS_Info; ///< \private
AUTOMY_VEHICLE_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_IMU_Info; ///< \private
AUTOMY_VEHICLE_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_Odometry; ///< \private
AUTOMY_VEHICLE_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_PPS_Signal; ///< \private
AUTOMY_VEHICLE_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_UBX_Packet; ///< \private
AUTOMY_VEHICLE_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_UbloxReceiverBase; ///< \private
AUTOMY_VEHICLE_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_VehicleDimensions; ///< \private
AUTOMY_VEHICLE_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_VehicleInfo; ///< \private
AUTOMY_VEHICLE_EXPORT extern const vnx::TypeCode* const vnx_native_type_code_WheelSpeed; ///< \private

} // namespace automy
} // namespace vehicle


namespace vnx {

void read(TypeInput& in, ::automy::vehicle::GPIO_PPS_ReceiverBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::vehicle::GPS_Info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::vehicle::IMU_Info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::vehicle::Odometry& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::vehicle::PPS_Signal& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::vehicle::UBX_Packet& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::vehicle::UbloxReceiverBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::vehicle::VehicleDimensions& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::vehicle::VehicleInfo& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::automy::vehicle::WheelSpeed& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void write(TypeOutput& out, const ::automy::vehicle::GPIO_PPS_ReceiverBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::vehicle::GPS_Info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::vehicle::IMU_Info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::vehicle::Odometry& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::vehicle::PPS_Signal& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::vehicle::UBX_Packet& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::vehicle::UbloxReceiverBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::vehicle::VehicleDimensions& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::vehicle::VehicleInfo& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::automy::vehicle::WheelSpeed& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void read(std::istream& in, ::automy::vehicle::GPIO_PPS_ReceiverBase& value); ///< \private
void read(std::istream& in, ::automy::vehicle::GPS_Info& value); ///< \private
void read(std::istream& in, ::automy::vehicle::IMU_Info& value); ///< \private
void read(std::istream& in, ::automy::vehicle::Odometry& value); ///< \private
void read(std::istream& in, ::automy::vehicle::PPS_Signal& value); ///< \private
void read(std::istream& in, ::automy::vehicle::UBX_Packet& value); ///< \private
void read(std::istream& in, ::automy::vehicle::UbloxReceiverBase& value); ///< \private
void read(std::istream& in, ::automy::vehicle::VehicleDimensions& value); ///< \private
void read(std::istream& in, ::automy::vehicle::VehicleInfo& value); ///< \private
void read(std::istream& in, ::automy::vehicle::WheelSpeed& value); ///< \private

void write(std::ostream& out, const ::automy::vehicle::GPIO_PPS_ReceiverBase& value); ///< \private
void write(std::ostream& out, const ::automy::vehicle::GPS_Info& value); ///< \private
void write(std::ostream& out, const ::automy::vehicle::IMU_Info& value); ///< \private
void write(std::ostream& out, const ::automy::vehicle::Odometry& value); ///< \private
void write(std::ostream& out, const ::automy::vehicle::PPS_Signal& value); ///< \private
void write(std::ostream& out, const ::automy::vehicle::UBX_Packet& value); ///< \private
void write(std::ostream& out, const ::automy::vehicle::UbloxReceiverBase& value); ///< \private
void write(std::ostream& out, const ::automy::vehicle::VehicleDimensions& value); ///< \private
void write(std::ostream& out, const ::automy::vehicle::VehicleInfo& value); ///< \private
void write(std::ostream& out, const ::automy::vehicle::WheelSpeed& value); ///< \private

void accept(Visitor& visitor, const ::automy::vehicle::GPIO_PPS_ReceiverBase& value); ///< \private
void accept(Visitor& visitor, const ::automy::vehicle::GPS_Info& value); ///< \private
void accept(Visitor& visitor, const ::automy::vehicle::IMU_Info& value); ///< \private
void accept(Visitor& visitor, const ::automy::vehicle::Odometry& value); ///< \private
void accept(Visitor& visitor, const ::automy::vehicle::PPS_Signal& value); ///< \private
void accept(Visitor& visitor, const ::automy::vehicle::UBX_Packet& value); ///< \private
void accept(Visitor& visitor, const ::automy::vehicle::UbloxReceiverBase& value); ///< \private
void accept(Visitor& visitor, const ::automy::vehicle::VehicleDimensions& value); ///< \private
void accept(Visitor& visitor, const ::automy::vehicle::VehicleInfo& value); ///< \private
void accept(Visitor& visitor, const ::automy::vehicle::WheelSpeed& value); ///< \private

/// \private
template<>
struct type<::automy::vehicle::GPIO_PPS_ReceiverBase> {
	void read(TypeInput& in, ::automy::vehicle::GPIO_PPS_ReceiverBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::vehicle::GPIO_PPS_ReceiverBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::vehicle::GPIO_PPS_ReceiverBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::vehicle::GPIO_PPS_ReceiverBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::vehicle::GPIO_PPS_ReceiverBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::automy::vehicle::GPS_Info> {
	void read(TypeInput& in, ::automy::vehicle::GPS_Info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::vehicle::GPS_Info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::vehicle::GPS_Info& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::vehicle::GPS_Info& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::vehicle::GPS_Info& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::vehicle::GPS_Info& value, bool special = false);
};

/// \private
template<>
struct type<::automy::vehicle::IMU_Info> {
	void read(TypeInput& in, ::automy::vehicle::IMU_Info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::vehicle::IMU_Info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::vehicle::IMU_Info& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::vehicle::IMU_Info& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::vehicle::IMU_Info& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::vehicle::IMU_Info& value, bool special = false);
};

/// \private
template<>
struct type<::automy::vehicle::Odometry> {
	void read(TypeInput& in, ::automy::vehicle::Odometry& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::vehicle::Odometry& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::vehicle::Odometry& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::vehicle::Odometry& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::vehicle::Odometry& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::vehicle::Odometry& value, bool special = false);
};

/// \private
template<>
struct type<::automy::vehicle::PPS_Signal> {
	void read(TypeInput& in, ::automy::vehicle::PPS_Signal& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::vehicle::PPS_Signal& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::vehicle::PPS_Signal& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::vehicle::PPS_Signal& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::vehicle::PPS_Signal& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::vehicle::PPS_Signal& value, bool special = false);
};

/// \private
template<>
struct type<::automy::vehicle::UBX_Packet> {
	void read(TypeInput& in, ::automy::vehicle::UBX_Packet& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::vehicle::UBX_Packet& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::vehicle::UBX_Packet& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::vehicle::UBX_Packet& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::vehicle::UBX_Packet& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::vehicle::UBX_Packet& value, bool special = false);
};

/// \private
template<>
struct type<::automy::vehicle::UbloxReceiverBase> {
	void read(TypeInput& in, ::automy::vehicle::UbloxReceiverBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::vehicle::UbloxReceiverBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::vehicle::UbloxReceiverBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::vehicle::UbloxReceiverBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::vehicle::UbloxReceiverBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::automy::vehicle::VehicleDimensions> {
	void read(TypeInput& in, ::automy::vehicle::VehicleDimensions& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::vehicle::VehicleDimensions& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::vehicle::VehicleDimensions& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::vehicle::VehicleDimensions& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::vehicle::VehicleDimensions& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::vehicle::VehicleDimensions& value, bool special = false);
};

/// \private
template<>
struct type<::automy::vehicle::VehicleInfo> {
	void read(TypeInput& in, ::automy::vehicle::VehicleInfo& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::vehicle::VehicleInfo& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::vehicle::VehicleInfo& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::vehicle::VehicleInfo& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::vehicle::VehicleInfo& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::vehicle::VehicleInfo& value, bool special = false);
};

/// \private
template<>
struct type<::automy::vehicle::WheelSpeed> {
	void read(TypeInput& in, ::automy::vehicle::WheelSpeed& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::automy::vehicle::WheelSpeed& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::automy::vehicle::WheelSpeed& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::automy::vehicle::WheelSpeed& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::automy::vehicle::WheelSpeed& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::automy::vehicle::WheelSpeed& value, bool special = false);
};


} // namespace vnx

#endif // INCLUDE_automy_vehicle_PACKAGE_HXX_
