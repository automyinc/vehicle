
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_automy_vehicle_VehicleDimensions_HXX_
#define INCLUDE_automy_vehicle_VehicleDimensions_HXX_

#include <automy/vehicle/package.hxx>
#include <vnx/Value.h>


namespace automy {
namespace vehicle {

class AUTOMY_VEHICLE_EXPORT VehicleDimensions : public ::vnx::Value {
public:
	
	vnx::float32_t width = 0;
	vnx::float32_t length = 0;
	vnx::float32_t height = 0;
	vnx::float32_t wheelbase = 0;
	vnx::float32_t ground_offset = 0;
	vnx::float32_t pos_x = 0;
	vnx::float32_t neg_x = 0;
	
	typedef ::vnx::Value Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0xf92e12e0b29c383full;
	
	VehicleDimensions() {}
	
	vnx::Hash64 get_type_hash() const override;
	std::string get_type_name() const override;
	const vnx::TypeCode* get_type_code() const override;
	
	static std::shared_ptr<VehicleDimensions> create();
	std::shared_ptr<vnx::Value> clone() const override;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) override;
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const override;
	
	void read(std::istream& _in) override;
	void write(std::ostream& _out) const override;
	
	template<typename T>
	void accept_generic(T& _visitor) const;
	void accept(vnx::Visitor& _visitor) const override;
	
	vnx::Object to_object() const override;
	void from_object(const vnx::Object& object) override;
	
	vnx::Variant get_field(const std::string& name) const override;
	void set_field(const std::string& name, const vnx::Variant& value) override;
	
	friend std::ostream& operator<<(std::ostream& _out, const VehicleDimensions& _value);
	friend std::istream& operator>>(std::istream& _in, VehicleDimensions& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
protected:
	std::shared_ptr<vnx::Value> vnx_call_switch(std::shared_ptr<const vnx::Value> _method) override;
	
};

template<typename T>
void VehicleDimensions::accept_generic(T& _visitor) const {
	_visitor.template type_begin<VehicleDimensions>(7);
	_visitor.type_field("width", 0); _visitor.accept(width);
	_visitor.type_field("length", 1); _visitor.accept(length);
	_visitor.type_field("height", 2); _visitor.accept(height);
	_visitor.type_field("wheelbase", 3); _visitor.accept(wheelbase);
	_visitor.type_field("ground_offset", 4); _visitor.accept(ground_offset);
	_visitor.type_field("pos_x", 5); _visitor.accept(pos_x);
	_visitor.type_field("neg_x", 6); _visitor.accept(neg_x);
	_visitor.template type_end<VehicleDimensions>(7);
}


} // namespace automy
} // namespace vehicle


namespace vnx {

} // vnx

#endif // INCLUDE_automy_vehicle_VehicleDimensions_HXX_
