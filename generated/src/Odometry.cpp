
// AUTO GENERATED by vnxcppcodegen

#include <automy/vehicle/package.hxx>
#include <automy/vehicle/Odometry.hxx>
#include <automy/basic/Transform3D.hxx>
#include <automy/math/Vector3d.hpp>

#include <vnx/vnx.h>


namespace automy {
namespace vehicle {


const vnx::Hash64 Odometry::VNX_TYPE_HASH(0x543083a351666ea6ull);
const vnx::Hash64 Odometry::VNX_CODE_HASH(0xd9642b0802d75bffull);

vnx::Hash64 Odometry::get_type_hash() const {
	return VNX_TYPE_HASH;
}

std::string Odometry::get_type_name() const {
	return "automy.vehicle.Odometry";
}

const vnx::TypeCode* Odometry::get_type_code() const {
	return automy::vehicle::vnx_native_type_code_Odometry;
}

std::shared_ptr<Odometry> Odometry::create() {
	return std::make_shared<Odometry>();
}

std::shared_ptr<vnx::Value> Odometry::clone() const {
	return std::make_shared<Odometry>(*this);
}

void Odometry::read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) {
	vnx::read(_in, *this, _type_code, _code);
}

void Odometry::write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const {
	vnx::write(_out, *this, _type_code, _code);
}

void Odometry::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = automy::vehicle::vnx_native_type_code_Odometry;
	_visitor.type_begin(*_type_code);
	_visitor.type_field(_type_code->fields[0], 0); vnx::accept(_visitor, time);
	_visitor.type_field(_type_code->fields[1], 1); vnx::accept(_visitor, time_offset);
	_visitor.type_field(_type_code->fields[2], 2); vnx::accept(_visitor, frame);
	_visitor.type_field(_type_code->fields[3], 3); vnx::accept(_visitor, parent);
	_visitor.type_field(_type_code->fields[4], 4); vnx::accept(_visitor, matrix);
	_visitor.type_field(_type_code->fields[5], 5); vnx::accept(_visitor, rotation);
	_visitor.type_field(_type_code->fields[6], 6); vnx::accept(_visitor, position);
	_visitor.type_field(_type_code->fields[7], 7); vnx::accept(_visitor, velocity);
	_visitor.type_field(_type_code->fields[8], 8); vnx::accept(_visitor, angular_velocity);
	_visitor.type_field(_type_code->fields[9], 9); vnx::accept(_visitor, acceleration);
	_visitor.type_field(_type_code->fields[10], 10); vnx::accept(_visitor, sensor_gyro_bias);
	_visitor.type_field(_type_code->fields[11], 11); vnx::accept(_visitor, speed_factor);
	_visitor.type_field(_type_code->fields[12], 12); vnx::accept(_visitor, is_timeout);
	_visitor.type_field(_type_code->fields[13], 13); vnx::accept(_visitor, sensor_gyro_bias_map);
	_visitor.type_end(*_type_code);
}

void Odometry::write(std::ostream& _out) const {
	_out << "{\"__type\": \"automy.vehicle.Odometry\"";
	_out << ", \"time\": "; vnx::write(_out, time);
	_out << ", \"time_offset\": "; vnx::write(_out, time_offset);
	_out << ", \"frame\": "; vnx::write(_out, frame);
	_out << ", \"parent\": "; vnx::write(_out, parent);
	_out << ", \"matrix\": "; vnx::write(_out, matrix);
	_out << ", \"rotation\": "; vnx::write(_out, rotation);
	_out << ", \"position\": "; vnx::write(_out, position);
	_out << ", \"velocity\": "; vnx::write(_out, velocity);
	_out << ", \"angular_velocity\": "; vnx::write(_out, angular_velocity);
	_out << ", \"acceleration\": "; vnx::write(_out, acceleration);
	_out << ", \"sensor_gyro_bias\": "; vnx::write(_out, sensor_gyro_bias);
	_out << ", \"speed_factor\": "; vnx::write(_out, speed_factor);
	_out << ", \"is_timeout\": "; vnx::write(_out, is_timeout);
	_out << ", \"sensor_gyro_bias_map\": "; vnx::write(_out, sensor_gyro_bias_map);
	_out << "}";
}

void Odometry::read(std::istream& _in) {
	if(auto _json = vnx::read_json(_in)) {
		from_object(_json->to_object());
	}
}

vnx::Object Odometry::to_object() const {
	vnx::Object _object;
	_object["__type"] = "automy.vehicle.Odometry";
	_object["time"] = time;
	_object["time_offset"] = time_offset;
	_object["frame"] = frame;
	_object["parent"] = parent;
	_object["matrix"] = matrix;
	_object["rotation"] = rotation;
	_object["position"] = position;
	_object["velocity"] = velocity;
	_object["angular_velocity"] = angular_velocity;
	_object["acceleration"] = acceleration;
	_object["sensor_gyro_bias"] = sensor_gyro_bias;
	_object["speed_factor"] = speed_factor;
	_object["is_timeout"] = is_timeout;
	_object["sensor_gyro_bias_map"] = sensor_gyro_bias_map;
	return _object;
}

void Odometry::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "acceleration") {
			_entry.second.to(acceleration);
		} else if(_entry.first == "angular_velocity") {
			_entry.second.to(angular_velocity);
		} else if(_entry.first == "frame") {
			_entry.second.to(frame);
		} else if(_entry.first == "is_timeout") {
			_entry.second.to(is_timeout);
		} else if(_entry.first == "matrix") {
			_entry.second.to(matrix);
		} else if(_entry.first == "parent") {
			_entry.second.to(parent);
		} else if(_entry.first == "position") {
			_entry.second.to(position);
		} else if(_entry.first == "rotation") {
			_entry.second.to(rotation);
		} else if(_entry.first == "sensor_gyro_bias") {
			_entry.second.to(sensor_gyro_bias);
		} else if(_entry.first == "sensor_gyro_bias_map") {
			_entry.second.to(sensor_gyro_bias_map);
		} else if(_entry.first == "speed_factor") {
			_entry.second.to(speed_factor);
		} else if(_entry.first == "time") {
			_entry.second.to(time);
		} else if(_entry.first == "time_offset") {
			_entry.second.to(time_offset);
		} else if(_entry.first == "velocity") {
			_entry.second.to(velocity);
		}
	}
}

vnx::Variant Odometry::get_field(const std::string& _name) const {
	if(_name == "time") {
		return vnx::Variant(time);
	}
	if(_name == "time_offset") {
		return vnx::Variant(time_offset);
	}
	if(_name == "frame") {
		return vnx::Variant(frame);
	}
	if(_name == "parent") {
		return vnx::Variant(parent);
	}
	if(_name == "matrix") {
		return vnx::Variant(matrix);
	}
	if(_name == "rotation") {
		return vnx::Variant(rotation);
	}
	if(_name == "position") {
		return vnx::Variant(position);
	}
	if(_name == "velocity") {
		return vnx::Variant(velocity);
	}
	if(_name == "angular_velocity") {
		return vnx::Variant(angular_velocity);
	}
	if(_name == "acceleration") {
		return vnx::Variant(acceleration);
	}
	if(_name == "sensor_gyro_bias") {
		return vnx::Variant(sensor_gyro_bias);
	}
	if(_name == "speed_factor") {
		return vnx::Variant(speed_factor);
	}
	if(_name == "is_timeout") {
		return vnx::Variant(is_timeout);
	}
	if(_name == "sensor_gyro_bias_map") {
		return vnx::Variant(sensor_gyro_bias_map);
	}
	return vnx::Variant();
}

void Odometry::set_field(const std::string& _name, const vnx::Variant& _value) {
	if(_name == "time") {
		_value.to(time);
	} else if(_name == "time_offset") {
		_value.to(time_offset);
	} else if(_name == "frame") {
		_value.to(frame);
	} else if(_name == "parent") {
		_value.to(parent);
	} else if(_name == "matrix") {
		_value.to(matrix);
	} else if(_name == "rotation") {
		_value.to(rotation);
	} else if(_name == "position") {
		_value.to(position);
	} else if(_name == "velocity") {
		_value.to(velocity);
	} else if(_name == "angular_velocity") {
		_value.to(angular_velocity);
	} else if(_name == "acceleration") {
		_value.to(acceleration);
	} else if(_name == "sensor_gyro_bias") {
		_value.to(sensor_gyro_bias);
	} else if(_name == "speed_factor") {
		_value.to(speed_factor);
	} else if(_name == "is_timeout") {
		_value.to(is_timeout);
	} else if(_name == "sensor_gyro_bias_map") {
		_value.to(sensor_gyro_bias_map);
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const Odometry& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, Odometry& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* Odometry::static_get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(VNX_TYPE_HASH);
	if(!type_code) {
		type_code = vnx::register_type_code(static_create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> Odometry::static_create_type_code() {
	auto type_code = std::make_shared<vnx::TypeCode>();
	type_code->name = "automy.vehicle.Odometry";
	type_code->type_hash = vnx::Hash64(0x543083a351666ea6ull);
	type_code->code_hash = vnx::Hash64(0xd9642b0802d75bffull);
	type_code->is_native = true;
	type_code->is_class = true;
	type_code->native_size = sizeof(::automy::vehicle::Odometry);
	type_code->parents.resize(1);
	type_code->parents[0] = ::automy::basic::Transform3D::static_get_type_code();
	type_code->create_value = []() -> std::shared_ptr<vnx::Value> { return std::make_shared<Odometry>(); };
	type_code->fields.resize(14);
	{
		auto& field = type_code->fields[0];
		field.data_size = 8;
		field.name = "time";
		field.code = {8};
	}
	{
		auto& field = type_code->fields[1];
		field.data_size = 4;
		field.name = "time_offset";
		field.code = {7};
	}
	{
		auto& field = type_code->fields[2];
		field.is_extended = true;
		field.name = "frame";
		field.code = {32};
	}
	{
		auto& field = type_code->fields[3];
		field.is_extended = true;
		field.name = "parent";
		field.code = {32};
	}
	{
		auto& field = type_code->fields[4];
		field.is_extended = true;
		field.name = "matrix";
		field.code = {21, 2, 4, 4, 10};
	}
	{
		auto& field = type_code->fields[5];
		field.is_extended = true;
		field.name = "rotation";
		field.code = {21, 2, 3, 1, 10};
	}
	{
		auto& field = type_code->fields[6];
		field.is_extended = true;
		field.name = "position";
		field.code = {21, 2, 3, 1, 10};
	}
	{
		auto& field = type_code->fields[7];
		field.is_extended = true;
		field.name = "velocity";
		field.code = {21, 2, 3, 1, 10};
	}
	{
		auto& field = type_code->fields[8];
		field.is_extended = true;
		field.name = "angular_velocity";
		field.code = {21, 2, 3, 1, 10};
	}
	{
		auto& field = type_code->fields[9];
		field.is_extended = true;
		field.name = "acceleration";
		field.code = {21, 2, 3, 1, 10};
	}
	{
		auto& field = type_code->fields[10];
		field.is_extended = true;
		field.name = "sensor_gyro_bias";
		field.code = {21, 2, 3, 1, 10};
	}
	{
		auto& field = type_code->fields[11];
		field.data_size = 8;
		field.name = "speed_factor";
		field.value = vnx::to_string(1);
		field.code = {10};
	}
	{
		auto& field = type_code->fields[12];
		field.data_size = 1;
		field.name = "is_timeout";
		field.code = {31};
	}
	{
		auto& field = type_code->fields[13];
		field.is_extended = true;
		field.name = "sensor_gyro_bias_map";
		field.code = {13, 3, 7, 21, 2, 3, 1, 10};
	}
	type_code->build();
	return type_code;
}

std::shared_ptr<vnx::Value> Odometry::vnx_call_switch(std::shared_ptr<const vnx::Value> _method) {
	switch(_method->get_type_hash()) {
	}
	return nullptr;
}


} // namespace automy
} // namespace vehicle


namespace vnx {

void read(TypeInput& in, ::automy::vehicle::Odometry& value, const TypeCode* type_code, const uint16_t* code) {
	if(code) {
		switch(code[0]) {
			case CODE_OBJECT:
			case CODE_ALT_OBJECT: {
				Object tmp;
				vnx::read(in, tmp, type_code, code);
				value.from_object(tmp);
				return;
			}
			case CODE_DYNAMIC:
			case CODE_ALT_DYNAMIC:
				vnx::read_dynamic(in, value);
				return;
		}
	}
	if(!type_code) {
		vnx::skip(in, type_code, code);
		return;
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: {
				vnx::skip(in, type_code, code);
				return;
			}
		}
	}
	const auto* const _buf = in.read(type_code->total_field_size);
	if(type_code->is_matched) {
		if(const auto* const _field = type_code->field_map[0]) {
			vnx::read_value(_buf + _field->offset, value.time, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[1]) {
			vnx::read_value(_buf + _field->offset, value.time_offset, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[11]) {
			vnx::read_value(_buf + _field->offset, value.speed_factor, _field->code.data());
		}
		if(const auto* const _field = type_code->field_map[12]) {
			vnx::read_value(_buf + _field->offset, value.is_timeout, _field->code.data());
		}
	}
	for(const auto* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			case 2: vnx::read(in, value.frame, type_code, _field->code.data()); break;
			case 3: vnx::read(in, value.parent, type_code, _field->code.data()); break;
			case 4: vnx::read(in, value.matrix, type_code, _field->code.data()); break;
			case 5: vnx::read(in, value.rotation, type_code, _field->code.data()); break;
			case 6: vnx::read(in, value.position, type_code, _field->code.data()); break;
			case 7: vnx::read(in, value.velocity, type_code, _field->code.data()); break;
			case 8: vnx::read(in, value.angular_velocity, type_code, _field->code.data()); break;
			case 9: vnx::read(in, value.acceleration, type_code, _field->code.data()); break;
			case 10: vnx::read(in, value.sensor_gyro_bias, type_code, _field->code.data()); break;
			case 13: vnx::read(in, value.sensor_gyro_bias_map, type_code, _field->code.data()); break;
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::automy::vehicle::Odometry& value, const TypeCode* type_code, const uint16_t* code) {
	if(code && code[0] == CODE_OBJECT) {
		vnx::write(out, value.to_object(), nullptr, code);
		return;
	}
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = automy::vehicle::vnx_native_type_code_Odometry;
		out.write_type_code(type_code);
		vnx::write_class_header<::automy::vehicle::Odometry>(out);
	}
	else if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	auto* const _buf = out.write(21);
	vnx::write_value(_buf + 0, value.time);
	vnx::write_value(_buf + 8, value.time_offset);
	vnx::write_value(_buf + 12, value.speed_factor);
	vnx::write_value(_buf + 20, value.is_timeout);
	vnx::write(out, value.frame, type_code, type_code->fields[2].code.data());
	vnx::write(out, value.parent, type_code, type_code->fields[3].code.data());
	vnx::write(out, value.matrix, type_code, type_code->fields[4].code.data());
	vnx::write(out, value.rotation, type_code, type_code->fields[5].code.data());
	vnx::write(out, value.position, type_code, type_code->fields[6].code.data());
	vnx::write(out, value.velocity, type_code, type_code->fields[7].code.data());
	vnx::write(out, value.angular_velocity, type_code, type_code->fields[8].code.data());
	vnx::write(out, value.acceleration, type_code, type_code->fields[9].code.data());
	vnx::write(out, value.sensor_gyro_bias, type_code, type_code->fields[10].code.data());
	vnx::write(out, value.sensor_gyro_bias_map, type_code, type_code->fields[13].code.data());
}

void read(std::istream& in, ::automy::vehicle::Odometry& value) {
	value.read(in);
}

void write(std::ostream& out, const ::automy::vehicle::Odometry& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::automy::vehicle::Odometry& value) {
	value.accept(visitor);
}

} // vnx
