
// AUTO GENERATED by vnxcppcodegen

#include <automy/vehicle/GPIO_PPS_ReceiverBase.hxx>
#include <automy/vehicle/GPS_Info.hxx>
#include <automy/vehicle/IMU_Info.hxx>
#include <automy/vehicle/Odometry.hxx>
#include <automy/vehicle/PPS_Signal.hxx>
#include <automy/vehicle/UBX_Packet.hxx>
#include <automy/vehicle/UbloxReceiverBase.hxx>
#include <automy/vehicle/VehicleDimensions.hxx>
#include <automy/vehicle/VehicleInfo.hxx>
#include <automy/vehicle/WheelSpeed.hxx>

#include <automy/vehicle/package.hxx>
#include <vnx/vnx.h>



namespace vnx {

const TypeCode* type<::automy::vehicle::GPS_Info>::get_type_code() {
	return automy::vehicle::vnx_native_type_code_GPS_Info;
}

void type<::automy::vehicle::GPS_Info>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::vehicle::GPS_Info());
}

void type<::automy::vehicle::GPS_Info>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::vehicle::GPS_Info& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::automy::vehicle::IMU_Info>::get_type_code() {
	return automy::vehicle::vnx_native_type_code_IMU_Info;
}

void type<::automy::vehicle::IMU_Info>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::vehicle::IMU_Info());
}

void type<::automy::vehicle::IMU_Info>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::vehicle::IMU_Info& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::automy::vehicle::Odometry>::get_type_code() {
	return automy::vehicle::vnx_native_type_code_Odometry;
}

void type<::automy::vehicle::Odometry>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::vehicle::Odometry());
}

void type<::automy::vehicle::Odometry>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::vehicle::Odometry& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::automy::vehicle::PPS_Signal>::get_type_code() {
	return automy::vehicle::vnx_native_type_code_PPS_Signal;
}

void type<::automy::vehicle::PPS_Signal>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::vehicle::PPS_Signal());
}

void type<::automy::vehicle::PPS_Signal>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::vehicle::PPS_Signal& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::automy::vehicle::UBX_Packet>::get_type_code() {
	return automy::vehicle::vnx_native_type_code_UBX_Packet;
}

void type<::automy::vehicle::UBX_Packet>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::vehicle::UBX_Packet());
}

void type<::automy::vehicle::UBX_Packet>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::vehicle::UBX_Packet& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::automy::vehicle::VehicleDimensions>::get_type_code() {
	return automy::vehicle::vnx_native_type_code_VehicleDimensions;
}

void type<::automy::vehicle::VehicleDimensions>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::vehicle::VehicleDimensions());
}

void type<::automy::vehicle::VehicleDimensions>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::vehicle::VehicleDimensions& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::automy::vehicle::VehicleInfo>::get_type_code() {
	return automy::vehicle::vnx_native_type_code_VehicleInfo;
}

void type<::automy::vehicle::VehicleInfo>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::vehicle::VehicleInfo());
}

void type<::automy::vehicle::VehicleInfo>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::vehicle::VehicleInfo& value, bool special) {
	code.push_back(CODE_OBJECT);
}

const TypeCode* type<::automy::vehicle::WheelSpeed>::get_type_code() {
	return automy::vehicle::vnx_native_type_code_WheelSpeed;
}

void type<::automy::vehicle::WheelSpeed>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::automy::vehicle::WheelSpeed());
}

void type<::automy::vehicle::WheelSpeed>::create_dynamic_code(std::vector<uint16_t>& code, const ::automy::vehicle::WheelSpeed& value, bool special) {
	code.push_back(CODE_OBJECT);
}


} // namespace vnx


namespace automy {
namespace vehicle {


void register_all_types() {
	vnx::register_type_code(::automy::vehicle::GPIO_PPS_ReceiverBase::static_create_type_code());
	vnx::register_type_code(::automy::vehicle::GPS_Info::static_create_type_code());
	vnx::register_type_code(::automy::vehicle::IMU_Info::static_create_type_code());
	vnx::register_type_code(::automy::vehicle::Odometry::static_create_type_code());
	vnx::register_type_code(::automy::vehicle::PPS_Signal::static_create_type_code());
	vnx::register_type_code(::automy::vehicle::UBX_Packet::static_create_type_code());
	vnx::register_type_code(::automy::vehicle::UbloxReceiverBase::static_create_type_code());
	vnx::register_type_code(::automy::vehicle::VehicleDimensions::static_create_type_code());
	vnx::register_type_code(::automy::vehicle::VehicleInfo::static_create_type_code());
	vnx::register_type_code(::automy::vehicle::WheelSpeed::static_create_type_code());
}

static struct vnx_static_init {
	vnx_static_init() {
		register_all_types();
	}
} vnx_static_init_;

const vnx::TypeCode* const vnx_native_type_code_GPIO_PPS_ReceiverBase = vnx::get_type_code(vnx::Hash64(0x892a6a792097fbd7ull));
const vnx::TypeCode* const vnx_native_type_code_GPS_Info = vnx::get_type_code(vnx::Hash64(0xbd0d89a3f33315e3ull));
const vnx::TypeCode* const vnx_native_type_code_IMU_Info = vnx::get_type_code(vnx::Hash64(0x29dd9d37c10e981full));
const vnx::TypeCode* const vnx_native_type_code_Odometry = vnx::get_type_code(vnx::Hash64(0x543083a351666ea6ull));
const vnx::TypeCode* const vnx_native_type_code_PPS_Signal = vnx::get_type_code(vnx::Hash64(0x392798cc0d63fa9bull));
const vnx::TypeCode* const vnx_native_type_code_UBX_Packet = vnx::get_type_code(vnx::Hash64(0x1a2f67e7bc19cf95ull));
const vnx::TypeCode* const vnx_native_type_code_UbloxReceiverBase = vnx::get_type_code(vnx::Hash64(0x569529e56d14ec5bull));
const vnx::TypeCode* const vnx_native_type_code_VehicleDimensions = vnx::get_type_code(vnx::Hash64(0xf92e12e0b29c383full));
const vnx::TypeCode* const vnx_native_type_code_VehicleInfo = vnx::get_type_code(vnx::Hash64(0xe1eb64ab47c30856ull));
const vnx::TypeCode* const vnx_native_type_code_WheelSpeed = vnx::get_type_code(vnx::Hash64(0x1094dcbeca93a65dull));

} // namespace automy
} // namespace vehicle
